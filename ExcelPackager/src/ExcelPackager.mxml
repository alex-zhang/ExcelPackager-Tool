<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   creationComplete="windowedapplication1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.childoftv.xlsxreader.Worksheet;
			import com.childoftv.xlsxreader.XLSXLoader;
			import com.sail.DataRepository;
			import com.sail.TableBasic;
			
			import flash.utils.ByteArray;
			import flash.utils.Timer;
			
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			
			public var importPath:String;
			public var outputPath:String;
			
			public var importFileDirectory:File;
			public var outputFile:File;

			public var workSheetMainNS:Namespace;
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				workSheetMainNS = new Namespace("http://schemas.openxmlformats.org/spreadsheetml/2006/main");
				use namespace workSheetMainNS;
				
				// TODO Auto-generated method stub
				var configFile:File = File.applicationDirectory.resolvePath("assets\\init.text");
				
				if(!configFile.exists)
				{
					logText(configFile.nativePath + " is not exist!");
					return;
				}
				
				configFile.addEventListener(Event.COMPLETE, 
					function(event:Event):void {
						configFile.removeEventListener(Event.COMPLETE, arguments.callee);
						
						//app startup
						var configFileChars:String = configFile.data.readUTFBytes(configFile.data.length);
						configFile.data.clear();
						
						var configLines:Array = StringUtil.trim(configFileChars).split("\n");
						
						var configLineItems:Array = null;
						var configKey:String;
						var configKeyValue:String;
						
						for(var i:int = 0, n:int = configLines ? configLines.length : 0; i < n; i++)
						{
							configLineItems = String(configLines[i]).split("=");
							
							configKey = StringUtil.trim(configLineItems[0]);
							configKeyValue = StringUtil.trim(configLineItems[1]);
							
							switch(configKey)
							{
								case "importPath":
									importPath = configKeyValue;
									break;
								
								case "outputPath":
									outputPath = configKeyValue;
									break;
							}
						}
						
						//start
						if(!importPath || importPath == "")
						{
							logText("importPath is not set");
							endFlow();
							return;	
						}
						
						var file:File = new File().resolvePath(importPath);
						startFlow(file);
					}
				);
				
				configFile.load();
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var file:File = new File().resolvePath(importPath);
				startFlow(file);
			}
			
			private function nextFlow():void
			{
				loadExcelFile();
			}
			
			private function startFlow(importFileDirectory:File):void
			{
				rebuildBtn.enabled = false;
				
				clearLogText();

				_dataRespository = new DataRepository();
				
				importFileDirectoryChildrenFiles = [];
				
				loadImportFiles(importFileDirectory);
			}
			
			private function endFlow():void
			{
				_dataRespository.dispose();
				_dataRespository = null;
				importFileDirectoryChildrenFiles = null;
				_importFileDirectoryChildrenFilesCount = 0;
				
				rebuildBtn.enabled = true;
			}

			//step1
			private var importFileDirectoryChildrenFiles:Array;
			private var _importFileDirectoryChildrenFilesCount:int = 0;
			private function loadImportFiles(file:File):void
			{
				importFileDirectory = file;
				if(!importFileDirectory.exists)
				{
					logText("import directory file is not exsit!");
					
					endFlow();
					return;
				}
				
				if(!importFileDirectory.isDirectory)
				{
					logText("import directory file is not a directory!");
					
					endFlow();
					return;
				}
				
				logText("import directory: " + file.nativePath);
				
				importFileDirectoryChildrenFiles = importFileDirectory.getDirectoryListing();
				filterImportFileDirectoryChildrenFiles();
				
				_importFileDirectoryChildrenFilesCount = importFileDirectoryChildrenFiles.length;
				if(_importFileDirectoryChildrenFilesCount > 0)
				{
					loadExcelFile();
				}
				else
				{
					logText("Empty excel files!");
					endFlow();
				}
			}
			
			private function filterImportFileDirectoryChildrenFiles():void
			{
				if(importFileDirectoryChildrenFiles && importFileDirectoryChildrenFiles.length)
				{
					importFileDirectoryChildrenFiles = importFileDirectoryChildrenFiles.filter(
						function(file:File, index:int, array:Array):Boolean 
						{
							var name:String = file.name;
							var firstCharCode:int = name.charAt(0);//start with character
							//65-90 97-122  A-Z a-z 
							if(firstCharCode < 65 || 
								(firstCharCode > 90 && firstCharCode < 97) || 
								(firstCharCode > 122 ))
							{
								return false;
							}
							
							return file.extension == "xlsx";// || excelFile.extension == "xls";
						}
					)
				}
			}
			
			private function loadExcelFile():void
			{
				if(importFileDirectoryChildrenFiles.length)
				{
					var excelFile:File = importFileDirectoryChildrenFiles.pop();
					excelFile.addEventListener(Event.COMPLETE, excelFileLoadCompleted);
					excelFile.addEventListener(IOErrorEvent.IO_ERROR, excelFileLoadError);
					
					function excelFileLoadCompleted():void
					{
						excelFile.removeEventListener(Event.COMPLETE, excelFileLoadCompleted);
						excelFile.removeEventListener(IOErrorEvent.IO_ERROR, excelFileLoadError);
						
						try
						{
							var fileName:String = String(excelFile.name.split(".")[0]);
							fileName = replaceCharAt(fileName, 0, fileName.charAt(0).toUpperCase());
							
							if(excelFile.extension == "xlsx")
							{
								analyzeAndSerializeTable_xlsx_ToBytes(fileName, excelFile.data);
							}
							else
							{
								analyzeAndSerializeTable_xls_ToBytes(fileName, excelFile.data);
							}
						}
						catch(error:Error)
						{
							logText("Error read " + excelFile.name + "message: " + error.message);
							
							nextFlow();	
							return;
						}
					}
					
					function excelFileLoadError():void
					{
						excelFile.removeEventListener(Event.COMPLETE, excelFileLoadCompleted);
						excelFile.removeEventListener(IOErrorEvent.IO_ERROR, excelFileLoadError);
						
						logText("Error excel file " + excelFile.name + " is openned!");
						
						nextFlow();	
					}
					
					logText("-------------------------------------------------------");
					logText("load excel file: " + excelFile.name);
					
					excelFile.load();
				}
				else
				{
					packageAll();
				}
			}
			
			private function packageAll():void
			{
				var n:int = _dataRespository.getAllTableCount();
				
				if(n == 0)
				{
					logText("packaging files num is " + n);
					
					endFlow()
					return;
				}
				
				var pacakgeBytes:ByteArray = new ByteArray();
				_dataRespository.serialize(pacakgeBytes);

				try
				{
					var file:File = new File().resolvePath(outputPath);
					
					var fileSteam:FileStream = new FileStream();
					fileSteam.open(file, FileMode.WRITE);
					
					pacakgeBytes.position = 0;
					fileSteam.writeBytes(pacakgeBytes);
					fileSteam.close();
				}
				catch(error:Error) 
				{
					logText("somthing error in packaging out file! message: " + error.message);
					
					endFlow()
					return;
				};
				
				
				logText(n + " files package. size: " + (pacakgeBytes.length / 1024) + " KBytes");
				logText("out put file: " + file.nativePath);
				logText("success!!!");
				
				endFlow();
			}
			
			private function logText(value:String):void
			{
				logTextArea.appendText(value + "\n");
			}
			
			private function clearLogText():void
			{
				logTextArea.text = null;
			}
			
			//excel 2010 - 2013
			private function analyzeAndSerializeTable_xlsx_ToBytes(fielName:String, excelFileBytes:ByteArray):void
			{
				var excelReader:XLSXLoader = new XLSXLoader();
				excelReader.addEventListener(Event.COMPLETE, 
					function():void 
					{
						excelReader.removeEventListener(Event.COMPLETE, arguments.callee);
						
						//we just read the defualt Sheet1
						
						var excelWorkSheet:Worksheet = excelReader.worksheetAt(0);
						//										trace(workSheet.toXML());
						var workSheetXML:XML = excelWorkSheet.toXML();
						
						var dimension:String = workSheetXML.workSheetMainNS::dimension.@ref;//A2:B9
						
						var dimensionArr:Array = dimension.split(":");
						var demensionStartResults:Array = splitCharsAndNumber(dimensionArr[0]);
						var demensionEndResults:Array = splitCharsAndNumber(dimensionArr[1]);
						
						logText("read excel file dimension: " + dimension);
						//A->65 Z->90
						
						var colStartIndex:String = demensionStartResults[0];
						var rowStartIndex:int = int(demensionStartResults[1]);
						
						var colEndIndex:String = demensionEndResults[0];
						var rowEndIndex:int = int(demensionEndResults[1]);
						
						//the row line 1 is used to add commonment
						if(rowStartIndex == 1) rowStartIndex = 2;
						
						var colNames:Array = [];
						var valideColChars:Array = [];
						var rowValues:Array = [];
						var rowValue:Array = [];
						var rowIndex:int = rowStartIndex;
						var colChars:String = colStartIndex;
						
						var loadTableCellValueTicker:Timer = new Timer(1);
						loadTableCellValueTicker.addEventListener(TimerEvent.TIMER, loadTableCellValueTickerHandler);
						var isTicking:Boolean = true;
						loadTableCellValueTicker.start();

						function loadTableCellValue():void
						{
							//							trace(rowIndex, colChars);
							if(rowIndex <= rowEndIndex)//row condition
							{
								if(compareChars(colChars, colEndIndex) <= 0)//col condition
								{
//									var t:int = getTimer();
									var cellValue:String = excelWorkSheet.getCellValue2(rowIndex, colChars);
//									trace(getTimer() - t);
									
//									var cellKey:String = colChars + ":" + rowIndex;
//									var cellValue:String = StringUtil.trim(excelWorkSheet.getCellValue(cellKey));
									
									if(rowIndex == rowStartIndex)
									{
										//not start with character, will ignore the col
										if(cellValue && cellValue.length > 0)
										{
											valideColChars.push(colChars);
											colNames.push(cellValue);
										}
									}
									else
									{
										if(valideColChars.indexOf(colChars) != -1)
										{
											rowValue.push(cellValue);
										}
									}
									
									//--
									colChars = stepChars(colChars);
								}
								else//col out
								{
									var lastRows:Array = rowValue;
									
									progress.setProgress(rowIndex - rowStartIndex, rowEndIndex - rowStartIndex);

									//---
									
									colChars = colStartIndex;
									rowValue = [];
									
									//--
									rowIndex++;
									
									if(lastRows.length > 0)
									{
										rowValues.push(lastRows);
									}
								}
							}
							else//row out
							{
								//Tick complete
								loadTableCellValueTicker.stop();
								loadTableCellValueTicker.removeEventListener(TimerEvent.TIMER, loadTableCellValueTickerHandler);
								loadTableCellValueTicker = null;
								isTicking = false;
								
								//Bytes ============================================
								analyzeSerializeTableExcel(fielName, colNames, rowValues); 
								
								nextFlow();	
							}
						}
						
						//比较耗时
						function loadTableCellValueTickerHandler():void 
						{
							//excute 1ms 
							for(var i:int = 0; isTicking && i < 1000; i++)
							{
								loadTableCellValue();
							}
						}
						
						//------------------------------------------------------
					}
				);
				excelReader.loadFromByteArray(excelFileBytes);
			}
			
			//excel ~ - 2007
			private function analyzeAndSerializeTable_xls_ToBytes(fielName:String, excelFileBytes:ByteArray):void
			{
//				var xls:ExcelFile = new ExcelFile();
//				xls.loadFromByteArray(excelFileBytes);
//				
//				//common
//				var i:int = 0, n:int = 0;
//				
//				var sheet:Sheet = null;
//				var sheets:ArrayCollection = xls.sheets;
//				n = xls.sheets.length;
//				for(i = 0; i < n; i++)
//				{
//					sheet = sheets.getItemAt(i) as Sheet;
//					if(sheet.name == "Sheet1")
//					{
//						break;
//					}
//				}
//				
//				if(sheet)
//				{
//					var colNames:Array = [];
//					var valideColChars:Array = [];
//					var rowValues:Array = [];
//					
//					trace(sheet.cols, sheet.rows);
//				}
			}
			
			private var _dataRespository:DataRepository;
			
			private function analyzeSerializeTableExcel(fielName:String, colNames:Array, rowValues:Array):void
			{
				var table:TableBasic = new TableBasic(fielName);
				table.fieldNames = colNames;
				
				var n:int = rowValues.length;
				for(var i:int = 0; i < n; i++)
				{
					var rowKey:String = rowValues[i][0];
						
					if(rowKey && rowKey.length)
					{
						var rowKeyValues:Object = {};
						
						//the key will set later
						var rowField:String = null;
						var rowCellValue:String = null;
						for(var col:int = 1, m:int = colNames.length;  col < m; col++)
						{
							rowField = colNames[col];
							rowCellValue = rowValues[i][col];
							
							rowKeyValues[rowField] = rowCellValue;
							
//							trace(rowKey, rowField, rowCellValue);
						}
						
						rowKey = StringUtil.trim(rowKey);
						
						if(!rowKey || rowKey == "") continue;
						
						try
						{
							table.create(rowKey, rowKeyValues);
						}
						catch(error:Error)
						{
							logText("Error: " + error.message);
						}
					}
				}
				
				_dataRespository.createTable(table.tableName, table);
				
				logText("packaging file " + fielName + 
					" ( " + 
					(_importFileDirectoryChildrenFilesCount - importFileDirectoryChildrenFiles.length) + 
					"/" + 
					_importFileDirectoryChildrenFilesCount + 
					" )");
				
				logText("-------------------------------------------------------");
			}
			
			//Utils==============================================================
			// 0 equal -1 smaller 1 biger
			private static function compareChars(charsA:String, charsB:String):int
			{
				charsA = charsA.toUpperCase();
				charsB = charsB.toUpperCase();
				
				if(charsA == charsB) return 0;
				
				if(charsA.length < charsB.length) return -1;
				else if(charsA.length > charsB.length) return 1;
				else//equal length
				{
					var len:int = charsA.length;
					for(var i:int = 0; i < len; i++)
					{
						var charCodeA:int = charsA.charCodeAt(i);
						var charCodeB:int = charsB.charCodeAt(i);
						
						if(charCodeA < charCodeB) return -1;
						else if(charCodeA > charCodeB) return 1;
					}
					
					return 0;
				}
			}
			
			//A, B, C, , Z, AA, AB, AC, , AZ, BA, BB, , BZ .. ZZ, AAA....
			private static function stepChars(chars:String):String
			{
				if(!chars || chars == "") return "A";
				
				chars = chars.toUpperCase();
				
				var charsLenL:int = chars.length;
				var charsIndex:int = charsLenL - 1;
				var charCode:int = 0;
				
				while(true)
				{
					if(charsIndex >= 0)
					{
						//A->65 Z->90
						charCode = chars.charCodeAt(charsIndex);
						charCode++;
						
						if(charCode > 90)
						{
							chars = replaceCharAt(chars, charsIndex, "A")
							
							charsIndex--;
						}
						else
						{
							chars = replaceCharAt(chars, charsIndex, String.fromCharCode(charCode))
							break;
						}
					}
					else
					{
						chars = "A" + chars;
						break;
					}
				}
				
				return chars;
			}
			
			private static function replaceCharAt(chars:String, index:int, char:String):String
			{
				if(index < 0 || index > chars.length - 1) return chars;
				
				char = char.charAt(0);
				
				if(index == chars.length - 1)
				{
					return chars.substr(0, chars.length - 1) + char;
				}
				
				return chars.substring(0, index) + char + chars.substr(index + 1);
			}
			
			//[AAA22]
			private static function splitCharsAndNumber(value:String):Array
			{
				var noCharIndex:int = -1;
				for(var i:int = 0, n:int = value.length; i < n; i++)
				{
					var charCode:int = value.charCodeAt(i);
					if(charCode < 65 || charCode > 90)
					{
						noCharIndex = i;
						break;
					}
				}
				
				var chars:String = value.substring(0, noCharIndex);
				var number:int = parseInt(value.substr(noCharIndex));
				
				return [chars, number];
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%">
			<s:Button id="rebuildBtn" label="重新生成" click="button1_clickHandler(event)" />
			<s:Spacer width="100%" />
			<mx:ProgressBar id="progress" labelPlacement="center" mode="manual" label="reading...%3%"/>
		</s:HGroup>
		<s:TextArea id="logTextArea" width="100%" height="100%" editable="false"/>
	</s:VGroup>
</s:WindowedApplication>
